<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2019/6/26
 * Time: 18:54
 */

/*
某些整数能分解成若干个连续整数的和的形式，例如
15 = 1 + 2+3+4+5 
15 = 4 + 5 + 6
15 = 7 + 8 
某些整数不能分解为连续整数的和，例如:16 
输入: 一个整数N(N <= 10000)
输出:整数N对应的所有分解组合，按照每个分解中的最小整数
从小到大输出，每个分解占一行 ，每个数字之间有一个空格(每
行最后保留一个空格);如果没有任何分解组合，则输出NONE。
*/

/**
 *
 * 首先我们要知道，比如说15连续2个相邻位置上的数和为15的情况只可能有一种。比如说15连续3个相邻位置上的数和为15的情况只可能有一种
 * 也就是说一个数连续n个相邻位置上的数和为该数的情况只可能有一种。
 *解决的方法：递归
 *思路,生成一个1到该数的数组,然后截取相邻位置上的数生成新的数组
 * （比如说先截取连续相邻2个位置的所有情况，循环找出元素之和等于该数的情况，
 * 找到之后继续递归找连续相邻3个位置的所有情况，依次类推。。。。）
 *
 */

/**
 * @param $n  要分解的数
 * @param int $x  判断连续x个相邻位置上的分解情况
 */
function returnNum($n,$x=2){
    //声明一个静态变量，每当找到符合情况的就让该值+1，如果到最后该数仍为0，证明该数没有符合分解的组合
    static $num = 0;

    $mark = true;
    //保证输入的n为整数且小于等于10000的整数
    if(in_array($n,range(1,10000))){
        $arr = range(1,$n);

        //没有找到分解情况的return语句
        if($x == count($arr) && $num ==0){
            echo "NONE";
            return;
        }
        //找到分解情况的return语句
        if($x == count($arr)){
            return;
        }

        //声明一个数据，用于存放所有分解情况
        $data = array();

        for ($i = 0; $i < count($arr) - $x + 1; $i++){
            //截取连续相邻x个位置的所有情况,并经该数组存放在$data数组中
            $data[] = array_slice($arr,$i,$x);
        }

        //循环所有情况，判断满足之和为该数的的分解情况
        foreach ($data as $v){
            if(array_sum($v) == $n){
                $mark = false;
                $num++;
                echo implode(" ",$v)." ";
                echo "<br />";
                returnNum($n,$x+1);
            }
        }
        if($mark){
            returnNum($n,$x+1);
        }

    }else{
        echo "输入的N不合法";
    }
}
returnNum(15);
